import java.util.Properties
import org.gradle.api.DefaultTask
import org.gradle.api.provider.ListProperty
import org.gradle.api.provider.Property
import org.gradle.api.file.RegularFileProperty
import org.gradle.api.tasks.*

/*
 * This file was generated by the Gradle 'init' task.
 *
 * The settings file is used to specify which projects to include in your build.
 * For more detailed information on multi-project builds, please refer to https://docs.gradle.org/9.1.0/userguide/multi_project_builds.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */
pluginManagement {
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        gradlePluginPortal()
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        mavenLocal() // dev local
    }
}

enableFeaturePreview("TYPESAFE_PROJECT_ACCESSORS")

rootProject.name = "spotify-monorepo"
include(":android-lib")
include(":apps:android-sample")
include(":packages:core-domain")
include(":packages:core-dto")
include(":packages:core-ui")
include(":packages:fake")


// Load credentials from spotify-secret.properties
run {
    val properties = Properties()
    val propertiesFile = file("local.properties")

    if (propertiesFile.exists()) {
        logger.lifecycle("@@ LOADING PROPERTIES FROM local.properties")
        properties.load(propertiesFile.inputStream())

        val clientId = properties["CLIENT_ID"] ?: error("CLIENT_ID missing")
        val clientSecret = properties["CLIENT_SECRET"] ?: error("CLIENT_SECRET missing")

        gradle.extra.also {
            it.set("spotifyClientId", clientId.toString())
            it.set("spotifyClientSecret", clientSecret.toString())
        }
    } else {
        logger.error("No local.properties file found in project! This file must contain CLIENT_ID and CLIENT_SECRET.")
    }
}
